import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter the number of pages: ");
        int n = sc.nextInt();

        System.out.println("Enter the page reference string (space-separated): ");
        int[] pages = new int[n];
        for (int i = 0; i < n; i++) {
            pages[i] = sc.nextInt();
        }

        System.out.println("Enter the number of frames: ");
        int f = sc.nextInt();

        int pageFaults = optimalPageReplacement(pages, f);

        System.out.println("Page Fault: " + pageFaults);
    }

    public static int optimalPageReplacement(int[] pages, int capacity) {
        int pageFaults = 0;
        int[] frames = new int[capacity];
        Arrays.fill(frames, -1);

        for (int i = 0; i < pages.length; i++) {
            System.out.println(Arrays.toString(frames));
            if (!contains(frames, pages[i])) {
                int index = getIndexOfFarthestPage(frames, pages, i);
                frames[index] = pages[i];
                pageFaults++;
            }
        }

        System.out.println(Arrays.toString(frames));
        return pageFaults;
    }

    public static boolean contains(int[] frames, int page) {
        for (int frame : frames) {
            if (frame == page) {
                return true;
            }
        }
        return false;
    }

    public static int getIndexOfFarthestPage(int[] frames, int[] pages, int currentIndex) {
        int farthestIndex = -1;
        int farthestDistance = -1;

        for (int i = 0; i < frames.length; i++) {
            int j;
            for (j = currentIndex + 1; j < pages.length; j++) {
                if (frames[i] == pages[j]) {
                    break;
                }
            }

            if (j == pages.length) {
                return i; // Page will not be used in the future, so replace it
            }

            if (j > farthestDistance) {
                farthestDistance = j;
                farthestIndex = i;
            }
        }

        return farthestIndex;
    }
}
